"use client";

import { useEffect, useMemo, useState } from "react";
import axios from "axios";
import Spinner from "@/components/utils/spinner";
import { PLATFORM_META } from "@/components/utils/profile-icons";
import type { PlatformKey } from "@/server/models/PublicProfile";
import { FiExternalLink, FiPlus, FiTrash2, FiEdit, FiSearch } from "react-icons/fi";

// Ensure axios always sends cookies
axios.defaults.withCredentials = true;

export type PublicProfile = {
    _id: string;
    platform: PlatformKey;
    name: string;
    username: string;
    url: string;
    createdAt: string;
    updatedAt: string;
};

const PLATFORM_TEMPLATES: Record<PlatformKey, (username: string) => string> = {
    linkedin: (u) => `https://www.linkedin.com/in/${u}`,
    github: (u) => `https://github.com/${u}`,
    leetcode: (u) => `https://leetcode.com/${u}`,
    hackerrank: (u) => `https://www.hackerrank.com/${u}`,
    codeforces: (u) => `https://codeforces.com/profile/${u}`,
    codechef: (u) => `https://www.codechef.com/users/${u}`,
    twitter: (u) => `https://twitter.com/${u}`,
    kaggle: (u) => `https://www.kaggle.com/${u}`,
    stackoverflow: (u) => `https://stackoverflow.com/users/${u}`,
    medium: (u) => `https://medium.com/@${u}`,
    custom: (u) => u,
};

export default function PublicProfilesPage() {
    const [profiles, setProfiles] = useState<PublicProfile[]>([]);
    const [loading, setLoading] = useState(true);
    const [modalOpen, setModalOpen] = useState(false);
    const [editing, setEditing] = useState<PublicProfile | null>(null);
    const [error, setError] = useState("");
    const [success, setSuccess] = useState("");
    const [query, setQuery] = useState("");
    const [submitting, setSubmitting] = useState(false);

    const [form, setForm] = useState({
        platform: "linkedin" as PlatformKey,
        name: "LinkedIn",
        username: "",
        url: "",
    });

    const filtered = useMemo(() => {
        const q = query.trim().toLowerCase();
        if (!q) return profiles;
        return profiles.filter((p) =>
            [p.username, p.name, p.platform, p.url].some((v) => v.toLowerCase().includes(q))
        );
    }, [profiles, query]);

    async function fetchProfiles() {
        try {
            const res = await axios.get("/api/public-profiles");
            setProfiles(res.data || []);
        } catch (e) {
            console.error("Failed to fetch profiles", e);
        } finally {
            setLoading(false);
        }
    }

    useEffect(() => {
        fetchProfiles();
    }, []);

    useEffect(() => {
        if (error || success) {
            const timer = setTimeout(() => {
                setError("");
                setSuccess("");
            }, 5000);
            return () => clearTimeout(timer);
        }
    }, [error, success]);

    // Auto-generate URL when platform/username changes, but don't override a manual URL
    useEffect(() => {
        if (!modalOpen || form.platform === "custom" || !form.username.trim()) {
            return;
        }

        const templater = PLATFORM_TEMPLATES[form.platform];
        const generatedUrl = templater(form.username.trim());

        setForm((prev) => {
            // Only update if the URL field is currently empty or matches a previously autogenerated URL from the same platform/username
            const isUrlAutoGenerated = prev.url === templater(prev.username) || prev.url.startsWith(templater(""));
            if (!prev.url || isUrlAutoGenerated) {
                return { ...prev, url: generatedUrl };
            }
            return prev;
        });

    }, [form.platform, form.username, modalOpen]);


    function openCreateModal() {
        setEditing(null);
        setForm({ platform: "linkedin", name: "LinkedIn", username: "", url: "" });
        setError("");
        setSuccess("");
        setModalOpen(true);
    }

    function onEdit(p: PublicProfile) {
        setEditing(p);
        setForm({ platform: p.platform, name: p.name, username: p.username, url: p.url });
        setError("");
        setSuccess("");
        setModalOpen(true);
    }

    function onChange(
        e: React.ChangeEvent<HTMLInputElement | HTMLSelectElement>
    ) {
        const { name, value } = e.target;
        setForm((f) => ({ ...f, [name]: value }));
        if (name === "platform") {
            const label = PLATFORM_META[value as PlatformKey].label;
            setForm((f) => ({ ...f, name: label }));
        }
        if (error) setError("");
        if (success) setSuccess("");
    }

    function validateForm() {
        if (!form.name.trim() || !form.username.trim() || !form.url.trim()) {
            setError("Please fill all required fields.");
            return false;
        }
        try {
            new URL(form.url.startsWith("http") ? form.url : `https://${form.url}`);
        } catch {
            setError("Enter a valid URL (e.g., https://...)");
            return false;
        }
        return true;
    }

    async function onSubmit() {
        if (!validateForm()) return;
        setSubmitting(true);
        try {
            if (editing) {
                const res = await axios.put(`/api/public-profiles/${editing._id}`, form);
                setProfiles((prev) => prev.map((p) => (p._id === editing._id ? res.data : p)));
                setSuccess("Profile updated successfully.");
            } else {
                const res = await axios.post("/api/public-profiles", form);
                setProfiles((prev) => [{ ...res.data, platform: form.platform, name: form.name }, ...prev])
                setSuccess("Profile added successfully.");
            }
            setError("");
            setEditing(null);
            setModalOpen(false);

            await fetchProfiles();
        } catch (e: any) {
            const msg = e?.response?.data?.error || (editing ? "Failed to update." : "Failed to add.");
            setError(msg);
        } finally {
            setSubmitting(false);
        }
    }

    async function onDelete(id: string) {
        if (!confirm("Are you sure to want to delete this profile?")) return;
        try {
            await axios.delete(`/api/public-profiles/${id}`);
            setProfiles((prev) => prev.filter((p) => p._id !== id));
            setSuccess("Profile deleted successfully.");
        } catch (e) {
            console.error("Failed to delete profile", e);
        }
    }

    return (
        <div className="bg-zinc-950 min-h-screen p-4 sm:p-12 flex flex-col items-start">
            {/* Header */}
            <div className="w-full flex flex-col sm:flex-row sm:items-center sm:justify-between gap-3 mb-6">
                <h1 className="text-xl sm:text-4xl font-bold text-white">Public Profiles</h1>
                <div className="flex w-full sm:w-auto items-center gap-3">
                    <div className="flex items-center gap-2 bg-zinc-900 border border-zinc-800 rounded-xl px-3 py-2 w-full sm:w-72">
                        <FiSearch />
                        <input
                            value={query}
                            onChange={(e) => setQuery(e.target.value)}
                            placeholder="Search profiles..."
                            className="bg-transparent outline-none text-white placeholder-zinc-500 w-full"
                        />
                    </div>
                    <button
                        onClick={openCreateModal}
                        className="flex items-center gap-1 text-white bg-blue-600 hover:bg-blue-700 transition px-3 py-2 rounded-lg text-sm sm:text-base cursor-pointer"
                    >
                        <FiPlus size={18} /> Add Profile
                    </button>
                </div>
            </div>

            {/* Global Messages */}
            {error && (
                <div className="w-full rounded-lg bg-red-500/20 text-red-400 p-3 mb-4 transition-opacity duration-300">
                    {error}
                </div>
            )}
            {success && (
                <div className="w-full rounded-lg bg-green-500/20 text-green-400 p-3 mb-4 transition-opacity duration-300">
                    {success}
                </div>
            )}

            {/* Content */}
            {loading ? (
                <Spinner />
            ) : filtered.length === 0 ? (
                <div className="flex flex-col items-center justify-center mt-12 text-zinc-400 w-full">
                    <p className="text-md sm:text-xl font-bold">No profiles found</p>
                    <p className="text-sm sm:text-base mt-1 text-center">Start by adding your profiles (LinkedIn, GitHub, etc.).</p>
                </div>
            ) : (
                <div className="grid grid-cols-1 sm:grid-cols-2 lg:grid-cols-3 gap-6 w-full max-w-full">
                    {filtered.map((p) => {
                        const Meta = PLATFORM_META[p.platform];
                        const Icon = Meta.Icon;
                        return (
                            <div
                                key={p._id}
                                className="bg-zinc-900/60 border border-zinc-800 rounded-2xl p-4 flex flex-col justify-between shadow-md hover:shadow-lg transition-all w-full"
                            >
                                <a
                                    href={p.url}
                                    target="_blank"
                                    rel="noopener noreferrer"
                                    className="flex items-start gap-3 hover:opacity-90"
                                >
                                    <div className="p-2 rounded-xl bg-zinc-800/70">
                                        <Icon className="w-6 h-6 text-white" />
                                    </div>
                                    <div className="flex-1 min-w-0">
                                        <div className="flex items-center gap-2 text-white font-semibold text-base sm:text-lg break-words">
                                            <span>{p.name}</span>
                                            <FiExternalLink className="opacity-70 hidden sm:block" />
                                        </div>
                                        <div className="text-zinc-400 text-sm break-words">@{p.username}</div>
                                        <div className="text-zinc-500 text-xs break-words">{p.url}</div>
                                    </div>
                                </a>
                                <div className="mt-4 flex justify-end gap-3">
                                    <button
                                        onClick={() => onEdit(p)}
                                        className="flex items-center gap-1 text-yellow-500 hover:text-yellow-600 transition text-sm sm:text-base cursor-pointer"
                                    >
                                        <FiEdit /> Edit
                                    </button>
                                    <button
                                        onClick={() => onDelete(p._id)}
                                        className="flex items-center gap-1 text-red-500 hover:text-red-600 transition text-sm sm:text-base cursor-pointer"
                                    >
                                        <FiTrash2 /> Delete
                                    </button>
                                </div>
                            </div>
                        );
                    })}
                </div>
            )}

            {/* Modal */}
            {modalOpen && (
                <div
                    className="fixed inset-0 pl-18 flex items-center justify-center overflow-y-auto bg-black/60 p-4"
                    onClick={() => {
                        setModalOpen(false);
                        setEditing(null);
                        setError("");
                        setSuccess("");
                    }}
                >
                    <div
                        className="w-full max-w-md rounded-2xl border border-zinc-800 bg-zinc-900 p-3 sm:p-5"
                        onClick={(e) => e.stopPropagation()}
                    >
                        <h2 className="text-md sm:text-2xl font-bold text-white mb-4">
                            {editing ? "Update Profile" : "Add New Profile"}
                        </h2>

                        <select
                            name="platform"
                            value={form.platform}
                            onChange={onChange}
                            className="p-2 mb-2 w-full rounded-xl border border-zinc-800 bg-zinc-950 text-white outline-none transition hover:border-zinc-700 focus:border-zinc-600"
                        >
                            {Object.entries(PLATFORM_META).map(([key, meta]) => (
                                <option key={key} value={key} className="bg-zinc-900">
                                    {meta.label}
                                </option>
                            ))}
                        </select>

                        <input
                            type="text"
                            name="name"
                            placeholder="Display Name"
                            value={form.name}
                            onChange={onChange}
                            className="p-2 mb-2 w-full rounded-xl border border-zinc-800 bg-zinc-950 text-white placeholder-zinc-500 outline-none transition hover:border-zinc-700 focus:border-zinc-600"
                        />

                        <input
                            type="text"
                            name="username"
                            placeholder="your-username"
                            value={form.username}
                            onChange={onChange}
                            className="p-2 mb-2 w-full rounded-xl border border-zinc-800 bg-zinc-950 text-white placeholder-zinc-500 outline-none transition hover:border-zinc-700 focus:border-zinc-600"
                        />
                        <input
                            type="text"
                            name="url"
                            placeholder="Profile URL"
                            value={form.url}
                            onChange={onChange}
                            className="p-2 mb-2 w-full rounded-xl border border-zinc-800 bg-zinc-950 text-white placeholder-zinc-500 outline-none transition hover:border-zinc-700 focus:border-zinc-600"
                        />

                        {error && <p className="text-red-500 mb-2 text-sm">{error}</p>}
                        {success && <p className="text-green-500 mb-2 text-sm">{success}</p>}

                        <div className="flex justify-end gap-2">
                            <button
                                onClick={() => {
                                    setModalOpen(false);
                                    setEditing(null);
                                    setForm({ platform: "linkedin", name: "LinkedIn", username: "", url: "" });
                                    setError("");
                                    setSuccess("");
                                }}
                                className="sm:text-base text-sm px-3 py-1 sm:px-4 sm:py-2 rounded-lg bg-zinc-700 text-white hover:bg-zinc-600 transition cursor-pointer"
                            >
                                Cancel
                            </button>
                            <button
                                onClick={onSubmit}
                                disabled={submitting}
                                className="sm:text-base text-sm px-3 py-1 sm:px-4 sm:py-2 rounded-lg bg-blue-600 text-white hover:bg-blue-700 disabled:opacity-60 transition cursor-pointer"
                            >
                                {submitting ? (editing ? "Updating..." : "Adding...") : editing ? "Update" : "Add"}
                            </button>
                        </div>
                    </div>
                </div>
            )}
        </div>
    );
}